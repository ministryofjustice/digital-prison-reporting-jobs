plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'io.freefair.lombok' version '6.5.1'
    id 'org.sonarqube'  version '3.5.0.2730'
    id 'org.owasp.dependencycheck'  version '8.2.1'
    id 'org.gradle.java-test-fixtures'
    id 'io.micronaut.minimal.library'  version '3.7.5'
}

group 'uk.gov.justice'

version "${version != 'unspecified' ? version : '0.0.1-SNAPSHOT'}"

java {
    targetCompatibility = "1.8"
}

jacoco {
    toolVersion = "0.8.8" // Adjust the version if needed
}


repositories {
    mavenCentral()
}

ext {
    deltaVersion = '2.2.0'
    jacksonVersion = '2.14.2'
    junitVersion = '5.8.1'
    log4jVersion = '2.20.0'
    micronautVersion = '4.0.0'
    mockitoVersion = '4.11.0'
    sparkVersion = '3.3.0'
    hadoopVersion = '3.3.1' // was hadoopVersion = '3.3.3' downgraded for Glue 4.0
    awsKinesisVersion = '1.9.3' // was awsKinesisVersion = '1.14.10' downgraded for Glue 4.0
    glueSdkVersion = '1.12.425'
}

dependencies {
    annotationProcessor 'info.picocli:picocli-codegen'

    compileOnly "org.apache.spark:spark-core_2.12:$sparkVersion"
    compileOnly "org.apache.spark:spark-sql_2.12:$sparkVersion"
    compileOnly "org.apache.hadoop:hadoop-aws:$hadoopVersion"
    compileOnly "com.amazonaws:amazon-kinesis-client:$awsKinesisVersion" // transitively brings in java-sdk-core

    implementation "com.amazonaws:aws-java-sdk-glue:$glueSdkVersion" // transitively brings in java-sdk-core

    implementation "org.apache.spark:spark-avro_2.12:$sparkVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    implementation "com.fasterxml.jackson:jackson-bom:$jacksonVersion"
    implementation "info.picocli:picocli"
    implementation "io.micronaut.picocli:micronaut-picocli"
    implementation "io.micronaut:micronaut-jackson-databind"
    implementation "io.micronaut:micronaut-runtime:$micronautVersion"
    implementation "io.micronaut:micronaut-validation"
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    implementation "io.delta:delta-core_2.12:$deltaVersion"
    implementation "io.delta:delta-contribs_2.12:$deltaVersion"

    // Where spark core is pulled in transitively, ensure that it is excluded so that we
    // don't include it in the jar build by the shadowJar plugin.
    // AWS Glue provides this on the classpath so we don't need to include it.
    implementation("org.apache.spark:spark-streaming-kinesis-asl_2.12:$sparkVersion") {
      exclude group: "org.apache.spark", module: "spark-core_2.12"
    }
    implementation("org.apache.spark:spark-hive_2.12:$sparkVersion") {
      exclude group: "org.apache.spark", module: "spark-core_2.12"
    }

    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.apache.spark:spark-sql_2.12:$sparkVersion"
    // We are targetting Java 8 so must use mockito 4.x since 5.x requires Java 11 or later.
    testImplementation 'org.mockito:mockito-core:4.11.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "com.networknt:json-schema-validator:1.0.81"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

sourceSets {
    integrationTest {
        java.srcDir 'src/it/java'
        resources.srcDir 'src/it/resources'
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation, testImplementation
}

// Exclude duplicate file from processing
processResources {
    exclude 'data/dms_update.json'
}

dependencies {
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

// Configure the integrationTest task
tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    maxHeapSize = '1024m'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    binaryResultsDirectory = file("$buildDir/integration-test-results/binary/integrationTest")

    testLogging {
        events "passed", "skipped", "failed"
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    reports {
        html.outputLocation = file("$buildDir/reports/integration-test")
        junitXml.outputLocation = file("$buildDir/integration-test-results")
    }

    mustRunAfter tasks.test
}

// Configure the check task to depend on integrationTest
check.dependsOn integrationTest

jacocoTestReport {
    dependsOn test
    dependsOn integrationTest
    reports {
        xml.required = true
        html.required = true
    }
}

shadowJar {
    zip64 true
}

micronaut {
  version micronautVersion
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
        "-Xlint:all"
    ]
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco.includeNoLocationClasses = true
    testLogging {
        events "passed", "skipped", "failed"
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    println("\nUsing $maxParallelForks executors")
}

assemble {
  dependsOn shadowJar
}
